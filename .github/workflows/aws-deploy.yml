name: AWS Deploy

on:
  workflow_call:
    inputs:
      deployment_description:
        description: 'Description of deployment'
        required: false
        type: string
      repository_name:
        description: 'caller repository name'
        required: true
        type: string
      branch_name:
        description: 'name branch to deploy'
        required: true
        type: string
      user:
        description: 'deployment requestor'
        required: true
        type: string
      event_type:
        description: 'github event type'
        required: true
        type: string
      ref_slug:
        description: 'full sandbox identifier'
        required: true
        type: string
      commit_sha:
        description: 'commit sha being deployed'
        required: false
        type: string
      pr_number:
        description: 'number of pull request'
        required: false
        type: string
      pr_labels:
        description: 'github pull request labels'
        required: false
        type: string
      service_name:
        description: 'service name'
        required: false
        type: string

    secrets:
      slack_webhook:
        description: 'slack webhook url'
        required: false
      aws_access_key_id:
        description: 'aws access key id'
        required: true
      aws_secret_access_key:
        description: 'aws secret access key'
        required: true
      aws_region:
        description: 'aws region'
        required: true
      pipeline_table_name:
        description: 'table to store pipeline executions'
        required: true

jobs:
  start-aws-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      - name: Start AWS Pipeline
        run: |
          export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}"

          case ${{ inputs.branch_name }} in

            *master*)
              export PIPELINE_STAGE="default"
              export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}"
              ;;

            *main*)
              export PIPELINE_STAGE="default"
              export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}"
              ;;

            *)
              export PIPELINE_STAGE="${{ inputs.ref_slug }}"
              export PIPELINE_STAGE="${PIPELINE_STAGE:0:15}"
              export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}-sandbox"
              ;;

          esac

          export PIPELINE_EXECUTIONS_TABLE="${{ secrets.pipeline_table_name }}"
          export PIPELINE_IMAGE_TAG=$(aws ssm get-parameter --name "/services-tags/${{ inputs.ref_slug }}/${{ inputs.service_name }}" | jq -r ".Parameter.Value")
          export PIPELINE_IMAGE_TAG=${PIPELINE_IMAGE_TAG:-master}
          export PIPELINE_EXECUTION_ID=$(aws codepipeline start-pipeline-execution --name $PIPELINE_NAME | jq -r ".pipelineExecutionId")
          export PIPELINE_DEPLOYMENT_DESCRIPTION="${{ inputs.deployment_description }}"
          export PIPELINE_DEPLOYMENT_DESCRIPTION="${PIPELINE_DEPLOYMENT_DESCRIPTION:0:100}"
          export PIPELINE_DEPLOYMENT_DESCRIPTION="${PIPELINE_DEPLOYMENT_DESCRIPTION//[$'\t\r\n\'']}"
          export PIPELINE_GITHUB_REPOSITORY_NAME="${{ inputs.repository_name }}"
          export PIPELINE_GITHUB_BRANCH_NAME="${{ inputs.branch_name }}"
          export PIPELINE_GITHUB_USER="${{ inputs.user }}"
          export PIPELINE_REF_SLUG="${{ inputs.ref_slug }}"
          export PIPELINE_GITHUB_EVENT_TYPE="${{ inputs.event_type }}"
          export PIPELINE_GITHUB_COMMIT_SHA="${{ inputs.commit_sha }}"
          export PIPELINE_GITHUB_PR_NUMBER="${{ inputs.pr_number }}"
          export PIPELINE_GITHUB_PR_LABELS="${{ inputs.pr_labels }}"
          export PIPELINE_SERVICE_NAME="${{ inputs.service_name }}"

          echo "$(env | grep 'PIPELINE_')"

          export PIPELINE_DATA=$(jq -n -c '$ENV | with_entries(if (.key|test("PIPELINE_")) then ( {key: .key, value: .value } ) else empty end ) | tojson')
          echo "PIPELINE_DATA = ${PIPELINE_DATA}"

          aws dynamodb put-item \
            --table-name "${PIPELINE_EXECUTIONS_TABLE}" \
            --item '{"pipelineExecutionId":{"S":"'"${PIPELINE_EXECUTION_ID}"'"},"parameters":{"S":'"${PIPELINE_DATA}"'}}'

          echo "When all pipelines complete, app will be available at https://${PIPELINE_STAGE}-app.dev.nexben.net"

  slack:
    runs-on: ubuntu-latest
    needs: [start-aws-pipeline]
    env:
      SLACK_USER: "${{ github.repository }}[${{ inputs.ref_slug }}]"
    steps:
      - name: Notify Deployed
        run: |
          curl -fsS \
            -X POST \
            -H 'content-type: application/json' \
              "${{secrets.slack_webhook}}" \
            -d '{"channel": "#ci-cd", "username": "'"$SLACK_USER-$GITHUB_ACTOR"'", "text": "AWS pipeline started ${{ inputs.branch_name }}\n<${{ github.server_url }}/${{ inputs.repository_name }}/actions/>", "icon_emoji": ":triangular_flag_on_post:"}'
