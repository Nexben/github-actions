name: Feature branch Deploy

on:
  workflow_call:
    inputs:
      repository_name:
        description: 'caller repository name'
        required: false
        type: string
      branch_name:
        description: 'name branch to deploy'
        required: true
        type: string
      tag_name:
        description: 'name tag to deploy'
        default: 'dev'
        required: false
        type: string
      service_name:
        description: 'service name'
        required: true
        type: string

    secrets:
      tf_api_token:
        description: 'trerraform access token'
        required: true
      slack_webhook:
        description: 'slack webhook url'
        required: false
      aws_access_key_id:
        description: 'aws access key id'
        required: true
      aws_secret_access_key:
        description: 'aws secret access key'
        required: true
      aws_region:
        description: 'aws region'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: [aws-deploy, terraform-deploy]
    steps:
      - name: run
        id: test
        continue-on-error: true
        run: |
          echo "run"

  terraform-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TF_WORKSPACE: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check branch
        id: test
        continue-on-error: true
        run: |
          echo "::set-output name=tag::dev"
          branch_name=$(git show-ref feature/${{ inputs.branch_name }});
          if [ -n "$branch_name" ]; then
            echo "::set-output name=tag::${{ inputs.branch_name }}"
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.tf_api_token }}
          terraform_wrapper: false
          terraform_version: "~1.0"

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: iac

      - name: Cache Terraform
        uses: actions/cache@v2
        with:
          path: iac/.terraform
          key: ${{ hashFiles('iac/.terraform.lock.hcl') }}

      - name: Set vars
        id: vars
        run: |

          APP_BRANCH=${{ inputs.branch_name }}
          PARAM_SPACE="dev"

          if [ APP_BRANCH = 'stage' ]; then
            PARAM_SPACE="dev"
          elif [ APP_BRANCH = 'master' ]; then
            PARAM_SPACE="dev"
          fi

          echo "APP_TAG     = ${{steps.test.outputs.tag}}"
          echo "APP_BRANCH  = $APP_BRANCH"
          echo "PARAM_SPACE = $PARAM_SPACE"

          echo "::set-output name=app_branch::$APP_BRANCH"
          echo "::set-output name=param_space::$PARAM_SPACE"


      - name: Terraform Init
        run: |
          echo  "tag          =\"${{steps.test.outputs.tag}}\""  >  terraform.auto.tfvars
          echo  "app_branch  =\"${{steps.vars.outputs.app_branch}}\""  >>  terraform.auto.tfvars
          echo  "param_space  =\"${{steps.vars.outputs.param_space}}\""  >>  terraform.auto.tfvars
          terraform init -migrate-state
          unset TF_WORKSPACE
          terraform workspace select dev
          terraform workspace select ${{steps.vars.outputs.app_branch}} || terraform workspace new ${{steps.vars.outputs.app_branch}}
          terraform init
        working-directory: iac

      - name: Terraform Validate
        run: terraform validate
        working-directory: iac

      - name: Terraform Apply
        env:
          TF_WORKSPACE: ${{steps.vars.outputs.app_branch}}
          TF_VAR_app_branch: ${{steps.vars.outputs.app_branch}}
          TF_VAR_tag: ${{steps.vars.outputs.tag}}

        run: terraform apply -auto-approve
        working-directory: iac

  aws-deploy:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      - name: Start AWS Pipeline
        run: |
          export AWS_TOOLS_PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}"
          export APP_TAG=aws ssm get-parameter --name "/services-tags/${{ inputs.branch_name }}/${{ inputs.service_name }}" | jq -r ".Parameter.Value"
          export PIPELINE_EXECUTION_ID=$(aws codepipeline start-pipeline-execution --name $AWS_TOOLS_PIPELINE_NAME | jq -r ".pipelineExecutionId")
          echo "PIPELINE_EXECUTION_ID = $PIPELINE_EXECUTION_ID"
          echo "AWS_TOOLS_PIPELINE_NAME = $AWS_TOOLS_PIPELINE_NAME"
          echo "PIPELINE_IMAGE_TAG = $APP_TAG"
          echo "PIPELINE_STAGE = ${{ inputs.branch_name }}"
          aws dynamodb put-item \
          --table-name ${{ secrets.AWS_TOOLS_PIPELINE_EXECUTIONS_TABLE_NAME }} \
          --item '{"pipelineExecutionId":{"S":"$PIPELINE_EXECUTION_ID"},"parameters":{"S":"{\"PIPELINE_STAGE\":\"${{ inputs.branch_name }}\",\"PIPELINE_IMAGE_TAG\":\"$APP_TAG\"}"}}'

  slack:
    if: always()
    runs-on: ubuntu-latest
    needs: [deploy]
    env:
      SLACK_USER: "${{ github.repository }}[${{ needs.vars.outputs.app_branch }}]"
    steps:
      - name: Notify Deployed
        run: |
          curl -fsS \
            -X POST \
            -H 'content-type: application/json' \
             "${{secrets.slack_webhook}}" \
            -d '{"channel": "#ci-cd", "username": "'"$SLACK_USER"'", "text": "Feature branch service deployed ${{ needs.vars.outputs.app_release }}\n<${{ github.server_url }}/${{ inputs.repository_name }}/actions/>", "icon_emoji": ":triangular_flag_on_post:"}'
