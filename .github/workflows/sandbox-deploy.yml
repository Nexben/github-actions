name: Sandbox Deploy

on:
  workflow_call:
    inputs:
      repository_name:
        description: 'caller repository name'
        required: false
        type: string
      branch_name:
        description: 'name branch to deploy'
        required: true
        type: string
      tag_name:
        description: 'name tag to deploy'
        default: 'dev'
        required: false
        type: string
      service_name:
        description: 'service name'
        required: true
        type: string

    secrets:
      slack_webhook:
        description: 'slack webhook url'
        required: false
      aws_access_key_id:
        description: 'aws access key id'
        required: true
      aws_secret_access_key:
        description: 'aws secret access key'
        required: true
      aws_region:
        description: 'aws region'
        required: true
      pipeline_table_name:
        description: 'table to store pipeline executions'
        required: true

jobs:
  aws-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      - name: Start AWS Pipeline
        run: |
          export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}"

          if [ "${{ inputs.branch_name }}" = 'dev' ]; then
            export PIPELINE_STAGE="default"
            export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}"
          else
            export PIPELINE_STAGE="${{ inputs.branch_name }}"
            export PIPELINE_NAME="default-cicd-nxb-apps-${{ inputs.service_name }}-sandbox"
          fi

          export PIPELINE_EXECUTIONS_TABLE="${{ secrets.pipeline_table_name }}"
          export PIPELINE_IMAGE_TAG=$(aws ssm get-parameter --name "/services-tags/${{ inputs.branch_name }}/${{ inputs.service_name }}" | jq -r ".Parameter.Value")
          export PIPELINE_IMAGE_TAG=${PIPELINE_IMAGE_TAG:-dev}
          export PIPELINE_EXECUTION_ID=$(aws codepipeline start-pipeline-execution --name $PIPELINE_NAME | jq -r ".pipelineExecutionId")
          export PIPELINE_GITHUB_WORKFLOW="${GITHUB_WORKFLOW}"
          export PIPELINE_GITHUB_JOB="${GITHUB_JOB}"
          export PIPELINE_GITHUB_ACTOR="${GITHUB_ACTOR}"
          export PIPELINE_GITHUB_SHA="${GITHUB_SHA}"
          export PIPELINE_GITHUB_EVENT_NAME="${GITHUB_EVENT_NAME}"
          export PIPELINE_GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"
          export PIPELINE_GITHUB_REF_NAME="${GITHUB_REF_NAME}"
          export PIPELINE_GITHUB_COMMIT_MESSAGE="${{ github.event.commits[0].message }}"
          export PIPELINE_GITHUB_COMMIT_MESSAGE="${PIPELINE_GITHUB_COMMIT_MESSAGE:0:100}"
          export PIPELINE_GITHUB_COMMIT_MESSAGE="${PIPELINE_GITHUB_COMMIT_MESSAGE//[$'\t\r\n\'']}"

          echo "$(env | grep 'PIPELINE_')"

          export PIPELINE_DATA=$(jq -n -c '$ENV | with_entries(if (.key|test("PIPELINE_")) then ( {key: .key, value: .value } ) else empty end ) | tojson')
          echo "PIPELINE_DATA = ${PIPELINE_DATA}"

          aws dynamodb put-item \
            --table-name "${PIPELINE_EXECUTIONS_TABLE}" \
            --item '{"pipelineExecutionId":{"S":"'"${PIPELINE_EXECUTION_ID}"'"},"parameters":{"S":'"${PIPELINE_DATA}"'}}'

  slack:
    runs-on: ubuntu-latest
    needs: [aws-deploy]
    env:
      SLACK_USER: "${{ github.repository }}[${{ inputs.branch_name }}]"
    steps:
      - name: Notify Deployed
        run: |
          curl -fsS \
            -X POST \
            -H 'content-type: application/json' \
              "${{secrets.slack_webhook}}" \
            -d '{"channel": "#ci-cd", "username": "'"$SLACK_USER-$GITHUB_ACTOR"'", "text": "Sandbox pipeline triggered ${{ inputs.tag_name }}\n<${{ github.server_url }}/${{ inputs.repository_name }}/actions/>", "icon_emoji": ":triangular_flag_on_post:"}'
